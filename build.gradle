plugins {
    id "java"
    id "groovy"
    id "application"
    id "idea"
    id "eclipse"
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id "nebula.provided-base" version "3.0.3"
    id "nebula.maven-publish" version "4.4.4"
    id "nebula.source-jar" version "4.4.4"
    id "nebula.javadoc-jar" version "4.4.4"
    id "com.jfrog.bintray" version "1.5"
    id 'com.github.ben-manes.versions' version '0.11.3'
}

group = "com.github.dnault"
version = "0.3.1-SNAPSHOT"

repositories {
    jcenter()
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}


targetCompatibility = "1.7"
sourceCompatibility = "1.7"

mainClassName = "com.github.dnault.xmlpatch.CommandLineDriver"

jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
}

// Use this workaround for excluding 'provided' dependencies from shadowJar:
//     https://github.com/johnrengelman/shadow/issues/166#issuecomment-160355617

configurations {
    isolated
}

def compileDependencies = ["org.jdom:jdom2:2.0.6",
                           "jaxen:jaxen:1.1.6",
                           "commons-io:commons-io:2.4",
                           "net.sf.jopt-simple:jopt-simple:4.9"]

dependencies {
    provided gradleApi()
    provided localGroovy()
    provided "org.apache.ant:ant:1.9.6"

    testCompile "junit:junit:4.12"

    compileDependencies.each {
        compile it
        isolated it
    }
}

shadowJar {
    ['org.apache.commons', 'org.jaxen', 'org.jdom2', 'joptsimple'].each {
        relocate it, "com.github.dnault.xmlpatch.repackaged.${it}"
    }

    // JAXEN-209 Jaxen includes a duplicate, obsolete version of this class not required by modern JDKs
    exclude 'org/w3c/dom/UserDataHandler.class'

    exclude 'META-INF/maven/**'
    exclude 'META-INF/*.txt'
    exclude 'META-INF/*.xml'

    configurations = [project.configurations.isolated]
}

def gitUrl = 'git@github.com:dnault/xml-patch.git';

def pomConfig = {
    name "${group}:${project.name}"
    description "Java implementation of RFC 5261: An XML Patch Operations Framework Utilizing XPath Selectors"
    url 'https://github.com/dnault/xml-patch'
    scm {
        url "${gitUrl}"
        connection "scm:git:${gitUrl}"
        developerConnection "scm:git:${gitUrl}"
    }
    licenses {
        license {
            name 'Apache License 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            name 'David Nault'
            email 'dnault@mac.com'
            organization 'dnault'
            organizationUrl 'https://github.com/dnault'
        }
    }
}

publishing {
    publications {
        shadow(MavenPublication) {
            pom.withXml {
                asNode().appendNode('description',
                        'Java implementation of RFC 5261: An XML Patch Operations Framework Utilizing XPath Selectors')
                asNode().children().last() + pomConfig
            }

            from components.java
            artifact shadowJar
            artifact sourceJar
            artifact javadocJar
        }
    }
}

bintray {

    if (project.hasProperty('bintrayUsername')) {
        user = project.bintrayUsername
    }

    if (project.hasProperty('bintrayApiKey')) {
        key = project.bintrayApiKey
    }

    publications = ['shadow'] // When uploading Maven-based publication files

    dryRun = false  //false //Whether to run this as dry-run, without deploying
    publish = false //true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        //  userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'xml-patch'
        desc = 'Java implementation of RFC 5261: An XML Patch Operations Framework Utilizing XPath Selectors'
        websiteUrl = 'https://github.com/dnault/xml-patch'
        issueTrackerUrl = 'https://github.com/dnault/xml-patch/issues'
        vcsUrl = 'https://github.com/dnault/xml-patch.git'
        licenses = ['Apache-2.0']
        labels = ['xml', 'patch']
        publicDownloadNumbers = false//true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
        version {
            name = project.version //'1.3-Final' //Bintray logical version name
            //desc = 'optional, version-specific description'
            released = new Date() //'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = project.version //'1.3.0'
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            gpg {
  //              sign = true //Determines whether to GPG sign the files. The default is false
    //            passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = false //true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token
                password = 'paasword' //OSS user password
                close = '0'//'1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

/*
tasks.release.finalizedBy bintrayUpload

tasks.bintrayUpload.doFirst {
    if (tasks.release.state.failure) {
        throw new RuntimeException("skipping bintray upload because release failed")
    }
} */
