import com.github.dnault.xmlpatch.filter.XmlPatch
import com.github.dnault.xmlpatch.filter.multi.XmlMultiPatch
import com.github.dnault.xmlpatch.filter.multi.XmlPatchSpec

buildscript {
    repositories {
        // mavenLocal()
    }

    dependencies {
        classpath fileTree("../build/libs")
    }
}

//println project.buildscript.configurations.classpath.asPath


apply plugin: 'java'
apply plugin: 'war'
//apply plugin: 'com.github.dnault.xmlpatch'


def webappPatch = new XmlPatchSpec("config/xml-patches/webapp-patch.xml", failOnMissingPatch: false)
def resourcesPatch = new XmlPatchSpec("config/xml-patches/resources-patch.xml", failOnMissingPatch: false)

war {
    webInf {
        from "src/main/etc/WEB-INF"

        filesMatching("**/*.xml") {
            filter(XmlMultiPatch, spec: webappPatch, path: it.path)
        }
    }

    filesMatching("**/*.xml") {
        filter(XmlMultiPatch, spec: webappPatch, path: it.path)
    }
}

processResources {
    filesMatching("**/*.xml") {
        println it.path
        filter(XmlMultiPatch, spec: resourcesPatch, path: it.path)
    }
}

task explodedWar(type: Sync) {
    into "${buildDir}/webapp"
    with war
}

[war, explodedWar].each {
    it.inputs.dir "config/xml-patches"
    it.doLast {
        webappPatch.assertFullyApplied()
    }
}

task foo << {
    copy {
        from "src/main/resources"
        into "build"
        filter(XmlPatch, patch: 'patch.xml')
    }
}

task patch(type: Copy) {
    inputs.file "patch.xml"

    from "source"
    into "build/patched"
    rename { "dest.xml" }

    filter(XmlPatch, patch: "patch.xml")
}
